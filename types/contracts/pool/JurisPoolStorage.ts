/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface JurisPoolStorageInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "NewStake" | "NewUnstake"): EventFragment;
}

export namespace NewStakeEvent {
  export type InputTuple = [
    key: BytesLike,
    owner: AddressLike,
    amount: BigNumberish,
    unlockTime: BigNumberish,
    mintAmount: BigNumberish
  ];
  export type OutputTuple = [
    key: string,
    owner: string,
    amount: bigint,
    unlockTime: bigint,
    mintAmount: bigint
  ];
  export interface OutputObject {
    key: string;
    owner: string;
    amount: bigint;
    unlockTime: bigint;
    mintAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewUnstakeEvent {
  export type InputTuple = [
    key: BytesLike,
    owner: AddressLike,
    amount: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    key: string,
    owner: string,
    amount: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    key: string;
    owner: string;
    amount: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JurisPoolStorage extends BaseContract {
  connect(runner?: ContractRunner | null): JurisPoolStorage;
  waitForDeployment(): Promise<this>;

  interface: JurisPoolStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "NewStake"
  ): TypedContractEvent<
    NewStakeEvent.InputTuple,
    NewStakeEvent.OutputTuple,
    NewStakeEvent.OutputObject
  >;
  getEvent(
    key: "NewUnstake"
  ): TypedContractEvent<
    NewUnstakeEvent.InputTuple,
    NewUnstakeEvent.OutputTuple,
    NewUnstakeEvent.OutputObject
  >;

  filters: {
    "NewStake(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      NewStakeEvent.InputTuple,
      NewStakeEvent.OutputTuple,
      NewStakeEvent.OutputObject
    >;
    NewStake: TypedContractEvent<
      NewStakeEvent.InputTuple,
      NewStakeEvent.OutputTuple,
      NewStakeEvent.OutputObject
    >;

    "NewUnstake(bytes32,address,uint256,uint256)": TypedContractEvent<
      NewUnstakeEvent.InputTuple,
      NewUnstakeEvent.OutputTuple,
      NewUnstakeEvent.OutputObject
    >;
    NewUnstake: TypedContractEvent<
      NewUnstakeEvent.InputTuple,
      NewUnstakeEvent.OutputTuple,
      NewUnstakeEvent.OutputObject
    >;
  };
}
