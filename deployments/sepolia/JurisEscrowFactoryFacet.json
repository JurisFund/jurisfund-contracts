{
  "address": "0xEF895C725810895dEfd747805424CF838E889D3D",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract JurisEscrowProxy",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "EscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initializer",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "deployEscrow",
      "outputs": [
        {
          "internalType": "contract JurisEscrowProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJurisEscrowProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "isSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "preCalculateEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf383729143510463bd4e6b96c2feb5745813ce973e732fa3693c6ff41a8b3ebe",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x6158DB68eB3E39b051C0D546A57B79FDd135d445",
    "contractAddress": null,
    "transactionIndex": 48,
    "gasUsed": "651823",
    "logsBloom": "0x
    "blockHash": "0xa818523de4f4ae66bcbaa2dcc864c343c58e5c49167ac73d02c4af97682a025f",
    "transactionHash": "0xf383729143510463bd4e6b96c2feb5745813ce973e732fa3693c6ff41a8b3ebe",
    "logs": [],
    "blockNumber": 4842264,
    "cumulativeGasUsed": "13793014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b1def432790426f6f6a5882494861e42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract JurisEscrowProxy\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployEscrow\",\"outputs\":[{\"internalType\":\"contract JurisEscrowProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJurisEscrowProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"isSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"preCalculateEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"adapted from: - openzeppelin Creat2 lib - safe-protocol proxy Factory\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/EscrowFactoryFacet.sol\":\"JurisEscrowFactoryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/facets/EscrowFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {JurisEscrowProxy, IJurisEscrowProxy, IJurisEscrowFactory} from \\\"../interfaces/IJurisEscrowFactory.sol\\\";\\nimport {LibJuris} from \\\"../lib/LibJuris.sol\\\";\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/// adapted from:\\n/// - openzeppelin Creat2 lib\\n/// - safe-protocol proxy Factory\\ncontract JurisEscrowFactoryFacet is\\n  IJurisEscrowFactory,\\n  AutomationCompatibleInterface,\\n  ReentrancyGuardUpgradeable\\n{\\n  function isSettled(IJurisEscrowProxy proxy) external view returns (bool) {\\n    return LibJuris._getEscrowStorage()._escrowSettled[address(proxy)];\\n  }\\n\\n  function checkUpkeep(\\n    bytes calldata /* checkData */\\n  ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    LibJuris.EscrowStorage storage es = LibJuris._getEscrowStorage();\\n    upkeepNeeded = (block.timestamp - es._lastUpkeep) > es._upkeepInterval;\\n    performData = new bytes(0);\\n  }\\n\\n  function performUpkeep(bytes calldata /* performData */) external override nonReentrant {\\n    LibJuris.EscrowStorage storage es = LibJuris._getEscrowStorage();\\n    if ((block.timestamp - es._lastUpkeep) > es._upkeepInterval) {\\n      es._lastUpkeep = block.timestamp;\\n    }\\n    address[] memory proxies = es._escrowProxies;\\n    for (uint i = 0; i < proxies.length; i++) {\\n      if (!es._escrowSettled[proxies[i]]) {\\n        _trySettle(proxies[i]) == 1 ? es._escrowSettled[proxies[i]] = true : false;\\n      }\\n    }\\n  }\\n\\n  function preCalculateEscrowAddress(bytes32 salt) external view returns (address addr) {\\n    bytes32 bytecodeHash = keccak256(\\n      abi.encodePacked(\\n        _escrowCreationCode(),\\n        uint256(uint160(LibJuris._getEscrowStorage()._escrowImplementation))\\n      )\\n    );\\n\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(add(ptr, 0x40), bytecodeHash)\\n      mstore(add(ptr, 0x20), salt)\\n      mstore(ptr, address())\\n      let start := add(ptr, 0x0b)\\n      mstore8(start, 0xff)\\n      addr := keccak256(start, 85)\\n    }\\n  }\\n\\n  function deployEscrow(\\n    bytes memory initializer,\\n    bytes32 salt\\n  ) external nonReentrant returns (JurisEscrowProxy proxy) {\\n    LibJuris.EscrowStorage storage es = LibJuris._getEscrowStorage();\\n    address implementation = es._escrowImplementation;\\n    bytes memory deploymentData = abi.encodePacked(\\n      _escrowCreationCode(),\\n      uint256(uint160(implementation))\\n    );\\n    /* solhint-disable no-inline-assembly */\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      let size := extcodesize(implementation)\\n      if lt(size, 2) {\\n        revert(0, 0)\\n      }\\n      proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\n      if eq(proxy, 0) {\\n        revert(0, 0)\\n      }\\n      if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\\n        revert(0, 0)\\n      }\\n    }\\n\\n    es._escrowSettled[address(proxy)] = false;\\n    es._isEscrow[address(proxy)] = true;\\n    es._escrowProxies.push(address(proxy));\\n\\n    emit EscrowCreated(proxy, implementation);\\n  }\\n\\n  function _escrowCreationCode() internal pure returns (bytes memory) {\\n    return type(JurisEscrowProxy).creationCode;\\n  }\\n\\n  function _trySettle(address proxy) internal returns (uint256) {\\n    if (IJurisEscrowProxy(proxy).ready()) {\\n      try IJurisEscrowProxy(proxy).disburse() {\\n        return 1;\\n      } catch {\\n        return 0;\\n      }\\n    }\\n    return 0;\\n  }\\n}\\n\",\"keccak256\":\"0xaba5705f37f08a16d83a4ca0c4ac0c491e2ace015ccd33de69b28ae1a5a3929b\",\"license\":\"MIT\"},\"contracts/facets/EscrowProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nerror InvalidImplementationAddress();\\n\\n/// adapted from https://github.com/safe-global/safe-contracts/blob/main/contracts/proxies/SafeProxy.sol\\ncontract JurisEscrowProxy {\\n  address internal _IMPLEMENTATION_SLOT;\\n\\n  constructor(address _implementation) {\\n    if (_implementation == address(0)) {\\n      revert InvalidImplementationAddress();\\n    }\\n    _IMPLEMENTATION_SLOT = _implementation;\\n  }\\n\\n  /// @dev Fallback function forwards all transactions and returns all received return data.\\n  fallback() external payable {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let _implementation := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\n      if eq(calldataload(0), 0x0d5defa400000000000000000000000000000000000000000000000000000000) {\\n        mstore(0, _implementation)\\n        return(0, 0x20)\\n      }\\n      calldatacopy(0, 0, calldatasize())\\n      let success := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      if eq(success, 0) {\\n        revert(0, returndatasize())\\n      }\\n      return(0, returndatasize())\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x734936844a4f0c38bcb1cc5d2a42a19ea79ef21089827e2bb05cac8282fb41ee\",\"license\":\"MIT\"},\"contracts/interfaces/IJurisEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, EscrowData} from \\\"../lib/Structs.sol\\\";\\n\\ninterface IJurisEscrow {\\n  event EtherReceived(uint256 amount);\\n\\n  event EscrowInitialized(\\n    uint256 principal,\\n    address indexed plaintiff,\\n    address lawer,\\n    address token\\n  );\\n\\n  event EscrowSettled(uint256 settlement, uint256 jurisFundFee, uint256 timestamp);\\n\\n  error NotInitialized();\\n  error AlreadyInitialized();\\n  error UnAuthorized();\\n  error NotEnoughFunds(uint256 actual, uint256 expected);\\n\\n  /// ------------------ Error Codes --------------------\\n  /// first 4 bytes of keccak256(bytes(\\\"error message\\\"))\\n  /// ---------------------------------------------------\\n  /// ES1001 - Debt amount is too low (0xbd070be3)\\n  /// ES1515 - Minimum duration not reached (0xdb17e5b1)\\n  /// ES5001 - Escrow must be settled (0x124771cb)\\n  /// ES5011 - Escrow is already settled (0xc1efc194)\\n  /// ES4004 - Withdrawal failed (0xee910bd2)\\n  /// ---------------------------------------------------\\n  error Exception(uint256 errorCode);\\n\\n  function ready() external view returns (bool);\\n\\n  function getBalance() external view returns (uint256);\\n\\n  function deposit(uint256 amount) external payable;\\n\\n  function disburse() external;\\n\\n  function disburseWithOffChainAPR(uint256 precalculatedDebt) external;\\n\\n  function getEscrowData() external view returns (EscrowData memory);\\n\\n  function withdraw(IERC20 token) external;\\n}\\n\",\"keccak256\":\"0xbed33f2104f1f76b798b18bf1728889ed14e309d7f7a2bd9ea8ab7e0138fd0cb\",\"license\":\"MIT\"},\"contracts/interfaces/IJurisEscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {JurisEscrowProxy} from \\\"../facets/EscrowProxy.sol\\\";\\nimport {IJurisEscrowProxy} from \\\"./IJurisEscrowProxy.sol\\\";\\n\\ninterface IJurisEscrowFactory {\\n  event EscrowCreated(JurisEscrowProxy indexed proxy, address implementation);\\n\\n  function isSettled(IJurisEscrowProxy proxy) external view returns (bool);\\n\\n  function preCalculateEscrowAddress(bytes32 salt) external view returns (address addr);\\n\\n  function deployEscrow(\\n    bytes memory initializer,\\n    bytes32 salt\\n  ) external returns (JurisEscrowProxy proxy);\\n}\\n\",\"keccak256\":\"0xa5698ad515f8eb960bc6f9a29dcd4da1673c118442f1b11a85875bfaee776e1a\",\"license\":\"MIT\"},\"contracts/interfaces/IJurisEscrowProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IJurisEscrow} from \\\"./IJurisEscrow.sol\\\";\\n\\ninterface IJurisEscrowProxy is IJurisEscrow {\\n  /// @dev returns the address of the implementation contract\\n  function escrowAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xec2fe5cd47368397d05afc33ef795a2d4a79fc01055ec6ff6450d37f3474211f\",\"license\":\"MIT\"},\"contracts/lib/LibJuris.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {StakeData} from \\\"./Structs.sol\\\";\\n\\nlibrary LibJuris {\\n  struct PoolStorage {\\n    address _token; //token address\\n    uint256 _totalStakedAmount; // total staked amount\\n    uint256 _fullPeriod; // full stack period\\n    uint256 _minStakeAmount; // minimal stack amount\\n    uint256 _liquidity;\\n    mapping(bytes32 => StakeData) _stakes; // staking data\\n  }\\n  struct EscrowStorage {\\n    uint256 _upkeepInterval;\\n    uint256 _lastUpkeep;\\n    address _escrowImplementation;\\n    address[] _escrowProxies;\\n    mapping(address => bool) _escrowSettled;\\n    mapping(address => bool) _isEscrow;\\n  }\\n  struct TellerStorage {\\n    uint128 _withdrawalDelay;\\n    uint128 _lastWithdrawal;\\n    uint256 _maxSingleWithdrawal;\\n    address _safe;\\n  }\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"juris.storage.pool\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant PoolStorageLocation =\\n    0x8356a23936d9181410b4eb87f7ea6c98d92f0b339d590a092fe7e438640c3900;\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"juris.storage.escrow\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant EscrowStorageLocation =\\n    0x8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2600;\\n\\n  // keccak256(abi.encode(uint256(keccak256(\\\"juris.storage.teller\\\")) - 1)) & ~bytes32(uint256(0xff));\\n  bytes32 private constant TellerStorageLocation =\\n    0xbeae2ffc7d1538c26dc42cdb5facc76d68baeac93fbd741beeab0c34b93c9300;\\n\\n  function _getPoolStorage() internal pure returns (PoolStorage storage $) {\\n    assembly {\\n      $.slot := PoolStorageLocation\\n    }\\n  }\\n\\n  function _getEscrowStorage() internal pure returns (EscrowStorage storage $) {\\n    assembly {\\n      $.slot := EscrowStorageLocation\\n    }\\n  }\\n\\n  function _getTellerStorage() internal pure returns (TellerStorage storage $) {\\n    assembly {\\n      $.slot := TellerStorageLocation\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf682463fe884ca34e99bec68fb9b988079530b0e9f1fbd52eafcf4cf6eb74791\",\"license\":\"MIT\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nstruct StakeData {\\n  uint256 unlockTime; // unlock time\\n  uint256 amount; // amount of USDC\\n  uint256 liquidity; // mintedToken amount when stake\\n  address owner; // address of owner\\n  bool finished; // this value is true after user unstake\\n}\\n\\nstruct EscrowData {\\n  uint128 startTime; // time escrow was created\\n  uint112 jurisFundFeePercentage; // compounded interest for loan duration %\\n  uint8 initialized; // 0 or 1\\n  uint8 isSettled; // 0 or 1\\n  uint256 principal; // initial loan amount USD\\n  IERC20 settlementToken; // JUSDC loan token\\n  address plaintiff; // address of plaintiff for injury case\\n  address plaintiffLawer; // address of plaintiff lawyer\\n  address jurisFund; // address of Juris Diamond\\n  address jurisFundSafe; // address of juris safe multisig\\n}\\n\",\"keccak256\":\"0x1f3e5516c552a706745890372ba251d3e2e4c79ed9234d761857f794103644e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610acf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634585e33b1461005c5780636e04ff0d14610071578063c2a5feb11461009b578063dcc449bd146100c6578063ef50095714610121575b600080fd5b61006f61006a3660046106e3565b610134565b005b61008461007f3660046106e3565b610306565b604051610092929190610779565b60405180910390f35b6100ae6100a93660046107b5565b610379565b6040516001600160a01b039091168152602001610092565b6101116100d43660046107ce565b6001600160a01b031660009081527f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2604602052604090205460ff1690565b6040519015158152602001610092565b6100ae61012f366004610814565b6103fa565b61013c610591565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260080547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b26015461018b90426108df565b1115610198574260018201555b6000816003018054806020026020016040519081016040528092919081815260200182805480156101f257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d4575b5050505050905060005b81518110156102d65782600401600083838151811061021d5761021d6108f2565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166102c45761026a82828151811061025d5761025d6108f2565b60200260200101516105db565b6001146102785760006102c2565b6001836004016000848481518110610292576102926108f2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19168215151790555b505b806102ce81610908565b9150506101fc565b50505061030260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260080547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260154600092606092909161035d90426108df565b6040805160008152602081019091529110969095509350505050565b6000806103846106ac565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2602546040516103c092916001600160a01b031690602001610921565b60408051601f19818403018152828252805160209182012091830182905282018590523082529150600b0160ff8153605590209392505050565b6000610404610591565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2602547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2600906001600160a01b0316600061045b6106ac565b826001600160a01b0316604051602001610476929190610921565b6040516020818303038152906040529050813b600281101561049757600080fd5b50848151826020016000f59350836104ae57600080fd5b6000806000885160208a016000895af1036104c857600080fd5b6001600160a01b0384811660008181526004860160209081526040808320805460ff1990811690915560058901835281842080549091166001908117909155600389018054918201815584529282902090920180546001600160a01b031916841790559051928516835290917fc76ebdfeb2ab617f86d5644ebdd3f3e9ad7a4bdd5c23e71ece3316a29425cf9e910160405180910390a250505061058b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b92915050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f008054600119016105d557604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000816001600160a01b0316636defbf806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190610943565b156106a457816001600160a01b031663abc6fd0b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067f57600080fd5b505af1925050508015610690575060015b61069c57506000919050565b506001919050565b506000919050565b6060604051806020016106be906106d6565b601f1982820381018352601f90910116604052919050565b6101348061096683390190565b600080602083850312156106f657600080fd5b823567ffffffffffffffff8082111561070e57600080fd5b818501915085601f83011261072257600080fd5b81358181111561073157600080fd5b86602082850101111561074357600080fd5b60209290920196919550909350505050565b60005b83811015610770578181015183820152602001610758565b50506000910152565b821515815260406020820152600082518060408401526107a0816060850160208701610755565b601f01601f1916919091016060019392505050565b6000602082840312156107c757600080fd5b5035919050565b6000602082840312156107e057600080fd5b81356001600160a01b03811681146107f757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561082757600080fd5b823567ffffffffffffffff8082111561083f57600080fd5b818501915085601f83011261085357600080fd5b813581811115610865576108656107fe565b604051601f8201601f19908116603f0116810190838211818310171561088d5761088d6107fe565b816040528281528860208487010111156108a657600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561058b5761058b6108c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161091a5761091a6108c9565b5060010190565b60008351610933818460208801610755565b9190910191825250602001919050565b60006020828403121561095557600080fd5b815180151581146107f757600080fdfe608060405234801561001057600080fd5b5060405161013438038061013483398101604081905261002f9161007b565b6001600160a01b0381166100565760405163325c055b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100ab565b60006020828403121561008d57600080fd5b81516001600160a01b03811681146100a457600080fd5b9392505050565b607b806100b96000396000f3fe6080604052600080546001600160a01b0316633ca8841760e21b823501602757808252602082f35b3682833781823684845af490503d82833e806040573d82fd5b503d81f3fea26469706673582212204fb9ae7cdc2727ecb85187d50d2b4e33284cfd418a1831a9f6eaa7955694538a64736f6c63430008140033a26469706673582212200f52cf13a47314b0e4b9771c4d8960cc0f8cf3d12f6a534e7239d5f15f8ea0e764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634585e33b1461005c5780636e04ff0d14610071578063c2a5feb11461009b578063dcc449bd146100c6578063ef50095714610121575b600080fd5b61006f61006a3660046106e3565b610134565b005b61008461007f3660046106e3565b610306565b604051610092929190610779565b60405180910390f35b6100ae6100a93660046107b5565b610379565b6040516001600160a01b039091168152602001610092565b6101116100d43660046107ce565b6001600160a01b031660009081527f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2604602052604090205460ff1690565b6040519015158152602001610092565b6100ae61012f366004610814565b6103fa565b61013c610591565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260080547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b26015461018b90426108df565b1115610198574260018201555b6000816003018054806020026020016040519081016040528092919081815260200182805480156101f257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d4575b5050505050905060005b81518110156102d65782600401600083838151811061021d5761021d6108f2565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166102c45761026a82828151811061025d5761025d6108f2565b60200260200101516105db565b6001146102785760006102c2565b6001836004016000848481518110610292576102926108f2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19168215151790555b505b806102ce81610908565b9150506101fc565b50505061030260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260080547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b260154600092606092909161035d90426108df565b6040805160008152602081019091529110969095509350505050565b6000806103846106ac565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2602546040516103c092916001600160a01b031690602001610921565b60408051601f19818403018152828252805160209182012091830182905282018590523082529150600b0160ff8153605590209392505050565b6000610404610591565b7f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2602547f8afd255bdb7f34c49f6072e0b5539cfc59131ad505e98fc66299c2b24a8b2600906001600160a01b0316600061045b6106ac565b826001600160a01b0316604051602001610476929190610921565b6040516020818303038152906040529050813b600281101561049757600080fd5b50848151826020016000f59350836104ae57600080fd5b6000806000885160208a016000895af1036104c857600080fd5b6001600160a01b0384811660008181526004860160209081526040808320805460ff1990811690915560058901835281842080549091166001908117909155600389018054918201815584529282902090920180546001600160a01b031916841790559051928516835290917fc76ebdfeb2ab617f86d5644ebdd3f3e9ad7a4bdd5c23e71ece3316a29425cf9e910160405180910390a250505061058b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b92915050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f008054600119016105d557604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000816001600160a01b0316636defbf806040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190610943565b156106a457816001600160a01b031663abc6fd0b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067f57600080fd5b505af1925050508015610690575060015b61069c57506000919050565b506001919050565b506000919050565b6060604051806020016106be906106d6565b601f1982820381018352601f90910116604052919050565b6101348061096683390190565b600080602083850312156106f657600080fd5b823567ffffffffffffffff8082111561070e57600080fd5b818501915085601f83011261072257600080fd5b81358181111561073157600080fd5b86602082850101111561074357600080fd5b60209290920196919550909350505050565b60005b83811015610770578181015183820152602001610758565b50506000910152565b821515815260406020820152600082518060408401526107a0816060850160208701610755565b601f01601f1916919091016060019392505050565b6000602082840312156107c757600080fd5b5035919050565b6000602082840312156107e057600080fd5b81356001600160a01b03811681146107f757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561082757600080fd5b823567ffffffffffffffff8082111561083f57600080fd5b818501915085601f83011261085357600080fd5b813581811115610865576108656107fe565b604051601f8201601f19908116603f0116810190838211818310171561088d5761088d6107fe565b816040528281528860208487010111156108a657600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561058b5761058b6108c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161091a5761091a6108c9565b5060010190565b60008351610933818460208801610755565b9190910191825250602001919050565b60006020828403121561095557600080fd5b815180151581146107f757600080fdfe608060405234801561001057600080fd5b5060405161013438038061013483398101604081905261002f9161007b565b6001600160a01b0381166100565760405163325c055b60e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911790556100ab565b60006020828403121561008d57600080fd5b81516001600160a01b03811681146100a457600080fd5b9392505050565b607b806100b96000396000f3fe6080604052600080546001600160a01b0316633ca8841760e21b823501602757808252602082f35b3682833781823684845af490503d82833e806040573d82fd5b503d81f3fea26469706673582212204fb9ae7cdc2727ecb85187d50d2b4e33284cfd418a1831a9f6eaa7955694538a64736f6c63430008140033a26469706673582212200f52cf13a47314b0e4b9771c4d8960cc0f8cf3d12f6a534e7239d5f15f8ea0e764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "adapted from: - openzeppelin Creat2 lib - safe-protocol proxy Factory",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}